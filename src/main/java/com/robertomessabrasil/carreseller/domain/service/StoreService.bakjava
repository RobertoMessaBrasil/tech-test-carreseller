package com.robertomessabrasil.carreseller.domain.service;

import com.robertomessabrasil.carreseller.domain.entity.*;
import com.robertomessabrasil.carreseller.domain.observer.exception.OperationDeniedException;
import com.robertomessabrasil.carreseller.domain.observer.exception.StoreNotFoundException;
import com.robertomessabrasil.carreseller.domain.observer.exception.UserNotFoundException;
import com.robertomessabrasil.carreseller.domain.repository.IOpportunityRepository;
import com.robertomessabrasil.carreseller.domain.repository.IStoreRepository;
import com.robertomessabrasil.carreseller.valueobject.OpportunityStatusVO;
import com.robertomessabrasil.carreseller.valueobject.UserRoleVO;

import java.util.Optional;

import static com.robertomessabrasil.carreseller.domain.service.user.UserService.checkRole;

public class StoreService {

    public static StoreEntity createStore(UserEntity adminUser, StoreEntity store, IStoreRepository storeRepository) throws OperationDeniedException, UserNotFoundException, StoreNotFoundException {
        checkRole(adminUser, new UserRoleVO[]{UserRoleVO.buildAdminRole()}, observer);
        return storeRepository.create(store);
    }

    public static OpportunityEntity addOpportunity(
            UserEntity user, StoreEntity store, CustomerEntity customer, VehicleEntity vehicle,
            IOpportunityRepository opportunityRepository) throws OperationDeniedException {

        checkRole(user, new UserRoleVO[]{UserRoleVO.buildAdminRole(), UserRoleVO.buildUserRole()}, observer);

        OpportunityEntity opportunity = new OpportunityEntity()
                .setUser(user)
                .setCustomer(customer)
                .setVehicle(vehicle)
                .setStatus(OpportunityStatusVO.buildNew());

        opportunityRepository.create(opportunity);

        store.addOpportunity(opportunity);

        return opportunity;
    }

    public static StoreEntity findStoreById(int storeId, IStoreRepository storeRepository) throws StoreNotFoundException {
        Optional<StoreEntity> store = storeRepository.findById(storeId);
        if (store.isEmpty()) {
            throw new StoreNotFoundException();
        }
        return store.get();
    }

}
